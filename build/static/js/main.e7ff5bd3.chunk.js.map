{"version":3,"sources":["logo.svg","product.jsx","ServerPath.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Product","props","name","hostPath","BuildHostPath","host","window","location","hostname","protocol","App","useState","products","setProducts","price","newProduct","setNewProduct","getProducts","fetch","then","response","json","data","prevValue","enterProducts","catch","err","console","error","handleChange","event","target","value","useEffect","ServerPath","className","log","map","product","key","id","onChange","onClick","Boolean","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"oJAAAA,EAAOC,QAAU,IAA0B,kC,mICQ5BC,MANf,SAAiBC,GACb,OACI,2BAAIA,EAAMC,OCFdC,EAAW,GAcAC,MAZf,WAEI,IAAMC,EAAOC,OAAOC,SAASC,SACvBC,EAAWH,OAAOC,SAASE,SAG7BN,EADQ,cAATE,EACYI,EAAW,KAAOJ,EAAO,QAEzBI,EAAU,KAAOJ,GC4DrBK,MAlEf,WAAgB,IAAD,EAEkBC,mBAAS,IAF3B,mBAEPC,EAFO,KAEGC,EAFH,OAGsBF,mBAAS,CAC1CT,KAAM,GACNY,MAAO,IALI,mBAGPC,EAHO,KAGKC,EAHL,KAmBb,SAASC,IACPC,MAAMf,EAAW,aAChBgB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,aATR,SAAuBG,GACrBT,GAAY,SAACU,GACX,OAAOD,KAQPE,CADkB,EAAXF,SAGRG,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,MAG9B,SAASG,EAAaC,GAAQ,IAAD,EAELA,EAAMC,OAArB7B,EAFoB,EAEpBA,KAAM8B,EAFc,EAEdA,MAEbhB,GAAc,SAACO,GACb,OAAO,2BAAIA,GAAX,kBAAuBrB,EAAM8B,OAejC,OAxCAC,qBAAU,WACRC,IACAjB,MACA,IAsCA,yBAAKkB,UAAU,OACVR,QAAQS,IAAIjC,GACf,sCACCS,EAASyB,KAAI,SAACC,GACb,OACE,kBAAC,EAAD,CAASC,IAAKD,EAAQE,GAAItC,KAAMoC,EAAQpC,UAG5C,6BACE,2BAAOA,KAAK,OAAO8B,MAAOjB,EAAWb,KAAMuC,SAAUZ,IACrD,2BAAO3B,KAAK,QAAQ8B,MAAOjB,EAAWD,MAAO2B,SAAUZ,IACvD,4BAAQa,QAvBd,WAAuB,IACdxC,EAAgBa,EAAhBb,KAAMY,EAAUC,EAAVD,MAIbI,MAFYf,EAAW,sBAAwBD,EAAO,UAAYY,GAGjEK,KAAKF,GACLE,KAAKH,EAAc,CAACd,KAAM,GAAIY,MAAO,KACrCW,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,QAexB,UCtDYiB,QACW,cAA7BrC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASoC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEd7B,OAAM,SAAAG,GACLD,QAAQC,MAAMA,EAAM2B,c","file":"static/js/main.e7ff5bd3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nfunction Product(props) {\n    return (\n        <p>{props.name}</p>\n    )\n}\n\nexport default Product;","import React from \"react\";\n\nlet hostPath = \"\";\n\nfunction BuildHostPath() {\n    \n    const host = window.location.hostname;\n    const protocol = window.location.protocol;\n\n    if(host === \"localhost\") {\n        hostPath = protocol + \"//\" + host + \":8080\";\n    } else {\n        hostPath = protocol +\"//\" + host;\n    }  \n}\n\nexport default BuildHostPath;\nexport { hostPath };","import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Product from \"./product\";\nimport ServerPath, { hostPath } from \"./ServerPath\";\n\nfunction App() {\n\n  const[products, setProducts] = useState([]);\n  const[newProduct, setNewProduct] = useState({\n    name: \"\",\n    price: 0\n  });\n\n  useEffect(() => {\n    ServerPath();\n    getProducts();\n  },[]);\n\n  function enterProducts(data) {\n    setProducts((prevValue) => {\n      return data;\n    })\n  }\n\n  function getProducts() {\n    fetch(hostPath + \"/products\")\n    .then(response => response.json())\n    .then(({ data }) => {\n      enterProducts(data);\n    })\n    .catch(err => console.error(err));\n  }\n\n  function handleChange(event) {\n\n    const {name, value} = event.target;\n\n    setNewProduct((prevValue) => {\n      return {...prevValue, [name]:value}\n    });\n  }\n\n  function addProduct() {\n    const {name, price } = newProduct;\n\n    const url = hostPath + \"/products/add?name=\" + name + \"&price=\" + price;\n\n    fetch(url)\n    .then(getProducts)\n    .then(setNewProduct({name: \"\", price: 0}))\n    .catch(err => console.error(err));\n  }\n\n  return (\n    <div className=\"App\">\n        {console.log(hostPath)}\n      <h1>hello!</h1>\n      {products.map((product) => {\n        return (\n          <Product key={product.id} name={product.name} />\n        )\n      })}\n      <div>\n        <input name=\"name\" value={newProduct.name} onChange={handleChange}/>\n        <input name=\"price\" value={newProduct.price} onChange={handleChange}/>\n        <button onClick={addProduct}>Add</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}